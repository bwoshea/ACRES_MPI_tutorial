#!/bin/bash --login

# This script is submitted using the 'sbatch' command, i.e., 
#    'sbatch example_batch_script.sb'  (without the quotes).
#
# Look at https://wiki.hpcc.msu.edu/display/ITH/Job+Management+by+SLURM for
# job management commands (to see and modify submitted jobs)

########## SBATCH Lines for Resource Request ##########
#
# See https://slurm.schedmd.com/sbatch.html for a much more complete listing of options.
# 
# See https://docs.nersc.gov/jobs/examples/ for examples of node/task/cpu/etc. configurations
# (and https://help.rc.ufl.edu/doc/Sample_SLURM_Scripts for additional examples)
 
#SBATCH --time=00:01:00             # limit of wall clock time - how long the job will run (same as -t), in format hh:mm:ss
#SBATCH --nodes=4                   # number of different nodes - could be an exact number or a range of nodes (same as -N)
#SBATCH --ntasks=4                  # number of tasks - how many tasks (nodes) that you require (same as -n)
#SBATCH --cpus-per-task=1           # number of CPUs (or cores) per task (same as -c)
#SBATCH --mem-per-cpu=1G            # memory required per allocated CPU (or core) - amount of memory (in bytes)
#SBATCH --job-name example_sim      # you can give your job a name for easier identification (same as -J)
#SBATCH --mail-user=oshea@msu.edu   # lists the email address to which emails are sent, with options defined by --mail-type
#SBATCH --mail-type=ALL             # let me know when jobs start, end, or fail.

 
########## Command Lines to Run ##########

#### THE LINES BELOW THIS SET UP THE PYTHON ENVIRONMENT

# unload default Python module
module unload Python

# the following two lines set up Python, by modifying
# the Linux environmental variables that will find the Python
# executables and libraries
export PATH=/mnt/home/oshea/anaconda3/bin:$PATH
export LD_LIBRARY_PATH=/mnt/home/oshea/anaconda3/lib:$LD_LIBRARY_PATH

#### THE LINES BELOW THIS GO TO AND RUN YOUR CODE

# this changes to the directory where your code is located 
cd $HOME/ACRES_MPI_tutorial/mpi_examples

# this line calls your executable.
# 'srun' is similar to mpirun
# '-n 4' tells it to run with 4 tasks - this must be equal to ntasks*cpus-per-task
#        (from the SBATCH commands at the top of the script)
# 'python hello_world.py' tells python to run hello_world.py
 
srun -n 4 python hello_world.py             ### call your executable (similar to mpirun)

# The following lines print out a few lines of siple text, and then system
# information to your batch file output.  This can be useful for debugging.
echo ' '
echo '------------------------------' 
echo ' '
scontrol show job $SLURM_JOB_ID     ### write job information to output file

